Generates a dungeon with 5-12 rooms with a size between 3-15 in each direction.

Command line arguments are:
    -h          help
    -s          save
    -l          load
    --save      save
    --load      load
    --nummon [integer]

Switches preceeded by a single dash may be stacked, ig. -sl to save and load.

Generates a player '@' in the center of a random room.
Fixed some previous save/load bugs.

NOTE: Memory bug in path finder, causes pointer corruption when memory is freed

PATH FINDER:
The Dijkstra's implementation uses a min-heap in the form of a linked list, as well as
an associated array that describes if a cell has been visited, as well as making it easier 
to check neighboring nodes. See dungeon.c

Player movement:
Number Keys
'q' quits game
'f' toggles fog-of-war
't' teleport mode

Monster movement:
Currently uses distance map and moves towards lowest weight. Odd bug where monsters teleport
into the corner or move too quickly towards the player.

Events:
A priority queue is added too, popped and updated with each action executed. See game.c

Backlogged a bit, monsters may not generate correctly
Monster/Object loader needs work

BUGS:
Weird string bug while parsing, not sure if its a quirk with visual studio code's intellisence [RESOLVED]
Monster movement broken while I refactor some classes.
Dungeon requires one move before rendering correctly. [RESOLVED]
Rendering suddenly slower, high latency

Neat Things:
isWithinBox (algo.cpp) Used for detecting things inside a radius of some point
Console (console.h) Uses ncurses window system to fancy up the UI, moves setup into constructor/destructor